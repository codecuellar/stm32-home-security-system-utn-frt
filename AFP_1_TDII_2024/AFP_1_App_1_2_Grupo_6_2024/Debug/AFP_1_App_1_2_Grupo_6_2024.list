
AFP_1_App_1_2_Grupo_6_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003044  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  00005028  2**0
                  CONTENTS
  4 .ARM          00000008  08003208  08003208  00004208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003210  08003210  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003210  08003210  00004210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003214  08003214  00004214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08003218  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005028  2**0
                  CONTENTS
 10 .bss          00000784  20000028  20000028  00005028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  00005028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0bd  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c9e  00000000  00000000  00013115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00014db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008aa  00000000  00000000  000158f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b2c  00000000  00000000  0001619a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd55  00000000  00000000  00039cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9259  00000000  00000000  00046a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011fc74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f74  00000000  00000000  0011fcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00122c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080031d8 	.word	0x080031d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	080031d8 	.word	0x080031d8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc3a 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f878 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f988 	bl	80007fc <MX_GPIO_Init>
  MX_ETH_Init();
 80004ec:	f000 f8de 	bl	80006ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f92a 	bl	8000748 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 f952 	bl	800079c <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Leer el estado del pulsador
	      button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80004f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fc:	480d      	ldr	r0, [pc, #52]	@ (8000534 <main+0x58>)
 80004fe:	f001 faa3 	bl	8001a48 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	461a      	mov	r2, r3
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <main+0x5c>)
 8000508:	701a      	strb	r2, [r3, #0]

	      // Detectar el flanco de subida (cambio de estado de 0 a 1)
	      if (button_state == GPIO_PIN_SET && last_button_state == GPIO_PIN_RESET)
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <main+0x5c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d108      	bne.n	8000524 <main+0x48>
 8000512:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <main+0x60>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d104      	bne.n	8000524 <main+0x48>
	      {
	        direction = -direction; // Invertir la dirección
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <main+0x64>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	425b      	negs	r3, r3
 8000520:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <main+0x64>)
 8000522:	6013      	str	r3, [r2, #0]
	      }

	      last_button_state = button_state; // Actualizar el estado del pulsador
 8000524:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <main+0x5c>)
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <main+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]

	      // Llamar a la función que maneja la secuencia de LEDs
	      toggle_led_sequence();
 800052c:	f000 f80a 	bl	8000544 <toggle_led_sequence>
	      button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000530:	e7e2      	b.n	80004f8 <main+0x1c>
 8000532:	bf00      	nop
 8000534:	40020800 	.word	0x40020800
 8000538:	2000079c 	.word	0x2000079c
 800053c:	2000079d 	.word	0x2000079d
 8000540:	20000018 	.word	0x20000018

08000544 <toggle_led_sequence>:
  }
  /* USER CODE END 3 */
}

void toggle_led_sequence(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    // Encender el LED actual
    HAL_GPIO_WritePin(LED_PORTS[current_led], LED_PINS[current_led], GPIO_PIN_SET);
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <toggle_led_sequence+0x80>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1e      	ldr	r2, [pc, #120]	@ (80005c8 <toggle_led_sequence+0x84>)
 800054e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <toggle_led_sequence+0x80>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1d      	ldr	r2, [pc, #116]	@ (80005cc <toggle_led_sequence+0x88>)
 8000558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055c:	2201      	movs	r2, #1
 800055e:	4619      	mov	r1, r3
 8000560:	f001 fa8a 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000564:	20c8      	movs	r0, #200	@ 0xc8
 8000566:	f000 fc69 	bl	8000e3c <HAL_Delay>

    // Apagar el LED actual
    HAL_GPIO_WritePin(LED_PORTS[current_led], LED_PINS[current_led], GPIO_PIN_RESET);
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <toggle_led_sequence+0x80>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a16      	ldr	r2, [pc, #88]	@ (80005c8 <toggle_led_sequence+0x84>)
 8000570:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <toggle_led_sequence+0x80>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <toggle_led_sequence+0x88>)
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	2200      	movs	r2, #0
 8000580:	4619      	mov	r1, r3
 8000582:	f001 fa79 	bl	8001a78 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000586:	20c8      	movs	r0, #200	@ 0xc8
 8000588:	f000 fc58 	bl	8000e3c <HAL_Delay>

    // Calcular el siguiente LED en base a la dirección
    current_led += direction;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <toggle_led_sequence+0x80>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <toggle_led_sequence+0x8c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4413      	add	r3, r2
 8000596:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <toggle_led_sequence+0x80>)
 8000598:	6013      	str	r3, [r2, #0]

    // Ajustar el índice para mantenerlo dentro de los límites
    if (current_led >= num_leds) {
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <toggle_led_sequence+0x80>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <toggle_led_sequence+0x90>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	db03      	blt.n	80005ae <toggle_led_sequence+0x6a>
        current_led = 0;  // Si supera el índice máximo, vuelve al inicio
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <toggle_led_sequence+0x80>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
    } else if (current_led < 0) {
        current_led = num_leds - 1;  // Si va hacia atrás desde el inicio, salta al último LED
    }
}
 80005ac:	e008      	b.n	80005c0 <toggle_led_sequence+0x7c>
    } else if (current_led < 0) {
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <toggle_led_sequence+0x80>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da04      	bge.n	80005c0 <toggle_led_sequence+0x7c>
        current_led = num_leds - 1;  // Si va hacia atrás desde el inicio, salta al último LED
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <toggle_led_sequence+0x90>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a01      	ldr	r2, [pc, #4]	@ (80005c4 <toggle_led_sequence+0x80>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000798 	.word	0x20000798
 80005c8:	20000000 	.word	0x20000000
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000018 	.word	0x20000018
 80005d4:	20000014 	.word	0x20000014

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	@ 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	@ 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fdc9 	bl	800317e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	@ (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	@ 0xa8
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fb33 	bl	8001cc8 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f974 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2105      	movs	r1, #5
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fd94 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000696:	f000 f95d 	bl	8000954 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_ETH_Init+0x84>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <MX_ETH_Init+0x88>)
 80006b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006c4:	22e1      	movs	r2, #225	@ 0xe1
 80006c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_ETH_Init+0x84>)
 80006dc:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_ETH_Init+0x84>)
 80006e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_ETH_Init+0x84>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_ETH_Init+0x90>)
 80006ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_ETH_Init+0x84>)
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <MX_ETH_Init+0x94>)
 80006f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_ETH_Init+0x84>)
 80006f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_ETH_Init+0x84>)
 80006fe:	f000 fca7 	bl	8001050 <HAL_ETH_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f924 	bl	8000954 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800070c:	2238      	movs	r2, #56	@ 0x38
 800070e:	2100      	movs	r1, #0
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_ETH_Init+0x98>)
 8000712:	f002 fd34 	bl	800317e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_ETH_Init+0x98>)
 8000718:	2221      	movs	r2, #33	@ 0x21
 800071a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_ETH_Init+0x98>)
 800071e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000722:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <MX_ETH_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001bc 	.word	0x200001bc
 8000734:	40028000 	.word	0x40028000
 8000738:	200007a0 	.word	0x200007a0
 800073c:	2000011c 	.word	0x2000011c
 8000740:	2000007c 	.word	0x2000007c
 8000744:	20000044 	.word	0x20000044

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_USART3_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART3_UART_Init+0x4c>)
 8000780:	f001 ff3a 	bl	80025f8 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8e3 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000026c 	.word	0x2000026c
 8000798:	40004800 	.word	0x40004800

0800079c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007bc:	2202      	movs	r2, #2
 80007be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e6:	f001 f960 	bl	8001aaa <HAL_PCD_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f8b0 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200002b4 	.word	0x200002b4

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	@ 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b4b      	ldr	r3, [pc, #300]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a4a      	ldr	r2, [pc, #296]	@ (8000944 <MX_GPIO_Init+0x148>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b48      	ldr	r3, [pc, #288]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b44      	ldr	r3, [pc, #272]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a43      	ldr	r2, [pc, #268]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b41      	ldr	r3, [pc, #260]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b3d      	ldr	r3, [pc, #244]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a3c      	ldr	r2, [pc, #240]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b3a      	ldr	r3, [pc, #232]	@ (8000944 <MX_GPIO_Init+0x148>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b36      	ldr	r3, [pc, #216]	@ (8000944 <MX_GPIO_Init+0x148>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a35      	ldr	r2, [pc, #212]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b33      	ldr	r3, [pc, #204]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a2e      	ldr	r2, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x148>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b2c      	ldr	r3, [pc, #176]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <MX_GPIO_Init+0x148>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <MX_GPIO_Init+0x148>)
 80008a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <MX_GPIO_Init+0x148>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008c0:	4821      	ldr	r0, [pc, #132]	@ (8000948 <MX_GPIO_Init+0x14c>)
 80008c2:	f001 f8d9 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	4820      	ldr	r0, [pc, #128]	@ (800094c <MX_GPIO_Init+0x150>)
 80008cc:	f001 f8d4 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	481a      	ldr	r0, [pc, #104]	@ (8000950 <MX_GPIO_Init+0x154>)
 80008e6:	f000 ff03 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ea:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_GPIO_Init+0x14c>)
 8000904:	f000 fef4 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000908:	2340      	movs	r3, #64	@ 0x40
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480b      	ldr	r0, [pc, #44]	@ (800094c <MX_GPIO_Init+0x150>)
 8000920:	f000 fee6 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_GPIO_Init+0x150>)
 8000938:	f000 feda 	bl	80016f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	@ 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020400 	.word	0x40020400
 800094c:	40021800 	.word	0x40021800
 8000950:	40020800 	.word	0x40020800

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	@ 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a55      	ldr	r2, [pc, #340]	@ (8000b24 <HAL_ETH_MspInit+0x174>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	f040 80a4 	bne.w	8000b1c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
 80009d8:	4b53      	ldr	r3, [pc, #332]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	4a52      	ldr	r2, [pc, #328]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 80009de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e4:	4b50      	ldr	r3, [pc, #320]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
 80009f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	4a4b      	ldr	r2, [pc, #300]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 80009fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a00:	4b49      	ldr	r3, [pc, #292]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	4b45      	ldr	r3, [pc, #276]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	4a44      	ldr	r2, [pc, #272]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1c:	4b42      	ldr	r3, [pc, #264]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	4a3d      	ldr	r2, [pc, #244]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a38:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4c:	4a36      	ldr	r2, [pc, #216]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a54:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a70:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	4a28      	ldr	r2, [pc, #160]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <HAL_ETH_MspInit+0x178>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a98:	2332      	movs	r3, #50	@ 0x32
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	481e      	ldr	r0, [pc, #120]	@ (8000b2c <HAL_ETH_MspInit+0x17c>)
 8000ab4:	f000 fe1c 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ab8:	2386      	movs	r3, #134	@ 0x86
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4817      	ldr	r0, [pc, #92]	@ (8000b30 <HAL_ETH_MspInit+0x180>)
 8000ad4:	f000 fe0c 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aea:	230b      	movs	r3, #11
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	480f      	ldr	r0, [pc, #60]	@ (8000b34 <HAL_ETH_MspInit+0x184>)
 8000af6:	f000 fdfb 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000afa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b0c:	230b      	movs	r3, #11
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <HAL_ETH_MspInit+0x188>)
 8000b18:	f000 fdea 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3738      	adds	r7, #56	@ 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40028000 	.word	0x40028000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40021800 	.word	0x40021800

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb4:	f000 fd9c 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bec:	d13f      	bne.n	8000c6e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a20      	ldr	r2, [pc, #128]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c0a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <HAL_PCD_MspInit+0xb0>)
 8000c28:	f000 fd62 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <HAL_PCD_MspInit+0xb0>)
 8000c42:	f000 fd55 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c50:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f891 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f002 fa2d 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fbd1 	bl	80004dc <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000d48:	08003218 	.word	0x08003218
  ldr r2, =_sbss
 8000d4c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000d50:	200007ac 	.word	0x200007ac

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f931 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fde8 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f93b 	bl	8001036 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f911 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000001c 	.word	0x2000001c
 8000df4:	20000024 	.word	0x20000024
 8000df8:	20000020 	.word	0x20000020

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000024 	.word	0x20000024
 8000e20:	200007a8 	.word	0x200007a8

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200007a8 	.word	0x200007a8

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000024 	.word	0x20000024

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff47 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff5c 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffb0 	bl	8000fa4 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e08a      	b.n	8001178 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001068:	2b00      	cmp	r3, #0
 800106a:	d106      	bne.n	800107a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2223      	movs	r2, #35	@ 0x23
 8001070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fc9b 	bl	80009b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <HAL_ETH_Init+0x130>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a3f      	ldr	r2, [pc, #252]	@ (8001180 <HAL_ETH_Init+0x130>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <HAL_ETH_Init+0x130>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001096:	4b3b      	ldr	r3, [pc, #236]	@ (8001184 <HAL_ETH_Init+0x134>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a3a      	ldr	r2, [pc, #232]	@ (8001184 <HAL_ETH_Init+0x134>)
 800109c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010a2:	4b38      	ldr	r3, [pc, #224]	@ (8001184 <HAL_ETH_Init+0x134>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4936      	ldr	r1, [pc, #216]	@ (8001184 <HAL_ETH_Init+0x134>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010b0:	4b34      	ldr	r3, [pc, #208]	@ (8001184 <HAL_ETH_Init+0x134>)
 80010b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff feaa 	bl	8000e24 <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010d2:	e011      	b.n	80010f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010d4:	f7ff fea6 	bl	8000e24 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010e2:	d909      	bls.n	80010f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2204      	movs	r2, #4
 80010e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	22e0      	movs	r2, #224	@ 0xe0
 80010f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e03f      	b.n	8001178 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1e4      	bne.n	80010d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f97a 	bl	8001404 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 fa25 	bl	8001560 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fa7b 	bl	8001612 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	461a      	mov	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f9e3 	bl	80014f0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800114e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001162:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2210      	movs	r2, #16
 8001172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800

08001188 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <ETH_SetMACConfig+0x164>)
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	7b9b      	ldrb	r3, [r3, #14]
 80011a6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	7c12      	ldrb	r2, [r2, #16]
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d102      	bne.n	80011b6 <ETH_SetMACConfig+0x2e>
 80011b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011b4:	e000      	b.n	80011b8 <ETH_SetMACConfig+0x30>
 80011b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80011b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	7c52      	ldrb	r2, [r2, #17]
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d102      	bne.n	80011c8 <ETH_SetMACConfig+0x40>
 80011c2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011c6:	e000      	b.n	80011ca <ETH_SetMACConfig+0x42>
 80011c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	7fdb      	ldrb	r3, [r3, #31]
 80011d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	7f92      	ldrb	r2, [r2, #30]
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d102      	bne.n	80011ee <ETH_SetMACConfig+0x66>
 80011e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ec:	e000      	b.n	80011f0 <ETH_SetMACConfig+0x68>
 80011ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80011f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	7f1b      	ldrb	r3, [r3, #28]
 80011f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001206:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800120e:	2a00      	cmp	r2, #0
 8001210:	d102      	bne.n	8001218 <ETH_SetMACConfig+0x90>
 8001212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001216:	e000      	b.n	800121a <ETH_SetMACConfig+0x92>
 8001218:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800121a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	7bdb      	ldrb	r3, [r3, #15]
 8001220:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001222:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001228:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001230:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001232:	4313      	orrs	r3, r2
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fdf6 	bl	8000e3c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001266:	4013      	ands	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800126e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001276:	2a00      	cmp	r2, #0
 8001278:	d101      	bne.n	800127e <ETH_SetMACConfig+0xf6>
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	e000      	b.n	8001280 <ETH_SetMACConfig+0xf8>
 800127e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001280:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001286:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800128e:	2a01      	cmp	r2, #1
 8001290:	d101      	bne.n	8001296 <ETH_SetMACConfig+0x10e>
 8001292:	2208      	movs	r2, #8
 8001294:	e000      	b.n	8001298 <ETH_SetMACConfig+0x110>
 8001296:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001298:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80012a0:	2a01      	cmp	r2, #1
 80012a2:	d101      	bne.n	80012a8 <ETH_SetMACConfig+0x120>
 80012a4:	2204      	movs	r2, #4
 80012a6:	e000      	b.n	80012aa <ETH_SetMACConfig+0x122>
 80012a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80012b2:	2a01      	cmp	r2, #1
 80012b4:	d101      	bne.n	80012ba <ETH_SetMACConfig+0x132>
 80012b6:	2202      	movs	r2, #2
 80012b8:	e000      	b.n	80012bc <ETH_SetMACConfig+0x134>
 80012ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012bc:	4313      	orrs	r3, r2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fdb1 	bl	8000e3c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	fd20810f 	.word	0xfd20810f

080012f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	4b3d      	ldr	r3, [pc, #244]	@ (8001400 <ETH_SetDMAConfig+0x110>)
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7b1b      	ldrb	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <ETH_SetDMAConfig+0x2c>
 8001316:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800131a:	e000      	b.n	800131e <ETH_SetDMAConfig+0x2e>
 800131c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	7b5b      	ldrb	r3, [r3, #13]
 8001322:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001324:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	7f52      	ldrb	r2, [r2, #29]
 800132a:	2a00      	cmp	r2, #0
 800132c:	d102      	bne.n	8001334 <ETH_SetDMAConfig+0x44>
 800132e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001332:	e000      	b.n	8001336 <ETH_SetDMAConfig+0x46>
 8001334:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001336:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	7b9b      	ldrb	r3, [r3, #14]
 800133c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800133e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001344:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7f1b      	ldrb	r3, [r3, #28]
 800134a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800134c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	7f9b      	ldrb	r3, [r3, #30]
 8001352:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001354:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800135a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001362:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001364:	4313      	orrs	r3, r2
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff fd58 	bl	8000e3c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001394:	461a      	mov	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	791b      	ldrb	r3, [r3, #4]
 800139e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80013aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80013ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fd29 	bl	8000e3c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	f8de3f23 	.word	0xf8de3f23

08001404 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0a6      	sub	sp, #152	@ 0x98
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800140c:	2301      	movs	r3, #1
 800140e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001412:	2301      	movs	r3, #1
 8001414:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001418:	2300      	movs	r3, #0
 800141a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001446:	2300      	movs	r3, #0
 8001448:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001450:	2300      	movs	r3, #0
 8001452:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800146c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001470:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001472:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800147e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fe7f 	bl	8001188 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800148a:	2301      	movs	r3, #1
 800148c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800148e:	2301      	movs	r3, #1
 8001490:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001498:	2301      	movs	r3, #1
 800149a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80014ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014c4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff05 	bl	80012f0 <ETH_SetDMAConfig>
}
 80014e6:	bf00      	nop
 80014e8:	3798      	adds	r7, #152	@ 0x98
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3305      	adds	r3, #5
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	3204      	adds	r2, #4
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <ETH_MACAddressConfig+0x68>)
 8001512:	4413      	add	r3, r2
 8001514:	461a      	mov	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3303      	adds	r3, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	061a      	lsls	r2, r3, #24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3302      	adds	r3, #2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	4313      	orrs	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <ETH_MACAddressConfig+0x6c>)
 8001542:	4413      	add	r3, r2
 8001544:	461a      	mov	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40028040 	.word	0x40028040
 800155c:	40028044 	.word	0x40028044

08001560 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e03e      	b.n	80015ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68d9      	ldr	r1, [r3, #12]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	3206      	adds	r2, #6
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d80c      	bhi.n	80015d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68d9      	ldr	r1, [r3, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	e004      	b.n	80015da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d9bd      	bls.n	800156e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001604:	611a      	str	r2, [r3, #16]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e048      	b.n	80016b2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6919      	ldr	r1, [r3, #16]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800165c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	3212      	adds	r2, #18
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d80c      	bhi.n	80016a2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6919      	ldr	r1, [r3, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	e004      	b.n	80016ac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d9b3      	bls.n	8001620 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e2:	60da      	str	r2, [r3, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	e177      	b.n	80019fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800170c:	2201      	movs	r2, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8166 	bne.w	80019f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d005      	beq.n	8001742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173e:	2b02      	cmp	r3, #2
 8001740:	d130      	bne.n	80017a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 0201 	and.w	r2, r3, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d017      	beq.n	80017e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d123      	bne.n	8001834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	69b9      	ldr	r1, [r7, #24]
 8001830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80c0 	beq.w	80019f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b66      	ldr	r3, [pc, #408]	@ (8001a14 <HAL_GPIO_Init+0x324>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a65      	ldr	r2, [pc, #404]	@ (8001a14 <HAL_GPIO_Init+0x324>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b63      	ldr	r3, [pc, #396]	@ (8001a14 <HAL_GPIO_Init+0x324>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001892:	4a61      	ldr	r2, [pc, #388]	@ (8001a18 <HAL_GPIO_Init+0x328>)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a58      	ldr	r2, [pc, #352]	@ (8001a1c <HAL_GPIO_Init+0x32c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d037      	beq.n	800192e <HAL_GPIO_Init+0x23e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a57      	ldr	r2, [pc, #348]	@ (8001a20 <HAL_GPIO_Init+0x330>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d031      	beq.n	800192a <HAL_GPIO_Init+0x23a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a56      	ldr	r2, [pc, #344]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d02b      	beq.n	8001926 <HAL_GPIO_Init+0x236>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a55      	ldr	r2, [pc, #340]	@ (8001a28 <HAL_GPIO_Init+0x338>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d025      	beq.n	8001922 <HAL_GPIO_Init+0x232>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a54      	ldr	r2, [pc, #336]	@ (8001a2c <HAL_GPIO_Init+0x33c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x22e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a53      	ldr	r2, [pc, #332]	@ (8001a30 <HAL_GPIO_Init+0x340>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d019      	beq.n	800191a <HAL_GPIO_Init+0x22a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a52      	ldr	r2, [pc, #328]	@ (8001a34 <HAL_GPIO_Init+0x344>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0x226>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a51      	ldr	r2, [pc, #324]	@ (8001a38 <HAL_GPIO_Init+0x348>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x222>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a50      	ldr	r2, [pc, #320]	@ (8001a3c <HAL_GPIO_Init+0x34c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x21e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4f      	ldr	r2, [pc, #316]	@ (8001a40 <HAL_GPIO_Init+0x350>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x21a>
 8001906:	2309      	movs	r3, #9
 8001908:	e012      	b.n	8001930 <HAL_GPIO_Init+0x240>
 800190a:	230a      	movs	r3, #10
 800190c:	e010      	b.n	8001930 <HAL_GPIO_Init+0x240>
 800190e:	2308      	movs	r3, #8
 8001910:	e00e      	b.n	8001930 <HAL_GPIO_Init+0x240>
 8001912:	2307      	movs	r3, #7
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x240>
 8001916:	2306      	movs	r3, #6
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x240>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x240>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x240>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x240>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x240>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x240>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	@ (8001a18 <HAL_GPIO_Init+0x328>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a34      	ldr	r2, [pc, #208]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_GPIO_Init+0x354>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae84 	bls.w	800170c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40021c00 	.word	0x40021c00
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	40022400 	.word	0x40022400
 8001a44:	40013c00 	.word	0x40013c00

08001a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a94:	e003      	b.n	8001a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	041a      	lsls	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	619a      	str	r2, [r3, #24]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af02      	add	r7, sp, #8
 8001ab0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e101      	b.n	8001cc0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff f878 	bl	8000bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aea:	d102      	bne.n	8001af2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 f8a6 	bl	8002c48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7c1a      	ldrb	r2, [r3, #16]
 8001b04:	f88d 2000 	strb.w	r2, [sp]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b0c:	f001 f838 	bl	8002b80 <USB_CoreInit>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0ce      	b.n	8001cc0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 f89e 	bl	8002c6a <USB_SetCurrentMode>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0bf      	b.n	8001cc0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e04a      	b.n	8001bdc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3315      	adds	r3, #21
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	3314      	adds	r3, #20
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	b298      	uxth	r0, r3
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	332e      	adds	r3, #46	@ 0x2e
 8001b82:	4602      	mov	r2, r0
 8001b84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3318      	adds	r3, #24
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	331c      	adds	r3, #28
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	3320      	adds	r3, #32
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3324      	adds	r3, #36	@ 0x24
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	791b      	ldrb	r3, [r3, #4]
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3af      	bcc.n	8001b46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e044      	b.n	8001c76 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3301      	adds	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3b5      	bcc.n	8001bec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7c1a      	ldrb	r2, [r3, #16]
 8001c88:	f88d 2000 	strb.w	r2, [sp]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c90:	f001 f838 	bl	8002d04 <USB_DevInit>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00c      	b.n	8001cc0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fa00 	bl	80030be <USB_DevDisconnect>

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e267      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d075      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ce6:	4b88      	ldr	r3, [pc, #544]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d00c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf2:	4b85      	ldr	r3, [pc, #532]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d112      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfe:	4b82      	ldr	r3, [pc, #520]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d05b      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x108>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d157      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e242      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCC_OscConfig+0x74>
 8001d2e:	4b76      	ldr	r3, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e01d      	b.n	8001d78 <HAL_RCC_OscConfig+0xb0>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4b70      	ldr	r3, [pc, #448]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b6d      	ldr	r3, [pc, #436]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6c      	ldr	r2, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0xb0>
 8001d60:	4b69      	ldr	r3, [pc, #420]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a68      	ldr	r2, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b66      	ldr	r3, [pc, #408]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a65      	ldr	r2, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f850 	bl	8000e24 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff f84c 	bl	8000e24 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	@ 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e207      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xc0>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f83c 	bl	8000e24 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f838 	bl	8000e24 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	@ 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1f3      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0xe8>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dde:	4b4a      	ldr	r3, [pc, #296]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dea:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df6:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	4b41      	ldr	r3, [pc, #260]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x152>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1c7      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4937      	ldr	r1, [pc, #220]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	e03a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <HAL_RCC_OscConfig+0x244>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fff1 	bl	8000e24 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7fe ffed 	bl	8000e24 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1a8      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b28      	ldr	r3, [pc, #160]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4925      	ldr	r1, [pc, #148]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCC_OscConfig+0x244>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe ffd0 	bl	8000e24 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e88:	f7fe ffcc 	bl	8000e24 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e187      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d036      	beq.n	8001f20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_RCC_OscConfig+0x248>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ffb0 	bl	8000e24 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7fe ffac 	bl	8000e24 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e167      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x240>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x200>
 8001ee6:	e01b      	b.n	8001f20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x248>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe ff99 	bl	8000e24 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e00e      	b.n	8001f14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7fe ff95 	bl	8000e24 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d907      	bls.n	8001f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e150      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	42470000 	.word	0x42470000
 8001f10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	4b88      	ldr	r3, [pc, #544]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ea      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 8097 	beq.w	800205c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f32:	4b81      	ldr	r3, [pc, #516]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10f      	bne.n	8001f5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b7d      	ldr	r3, [pc, #500]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a7c      	ldr	r2, [pc, #496]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5e:	4b77      	ldr	r3, [pc, #476]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	4b74      	ldr	r3, [pc, #464]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a73      	ldr	r2, [pc, #460]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7fe ff55 	bl	8000e24 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7fe ff51 	bl	8000e24 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e10c      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	4b6a      	ldr	r3, [pc, #424]	@ (800213c <HAL_RCC_OscConfig+0x474>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2ea>
 8001fa4:	4b64      	ldr	r3, [pc, #400]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a63      	ldr	r2, [pc, #396]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb0:	e01c      	b.n	8001fec <HAL_RCC_OscConfig+0x324>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x30c>
 8001fba:	4b5f      	ldr	r3, [pc, #380]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	4a5b      	ldr	r2, [pc, #364]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0x324>
 8001fd4:	4b58      	ldr	r3, [pc, #352]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a57      	ldr	r2, [pc, #348]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	4b55      	ldr	r3, [pc, #340]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4a54      	ldr	r2, [pc, #336]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d015      	beq.n	8002020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7fe ff16 	bl	8000e24 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe ff12 	bl	8000e24 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0cb      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	4b49      	ldr	r3, [pc, #292]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0ee      	beq.n	8001ffc <HAL_RCC_OscConfig+0x334>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe ff00 	bl	8000e24 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fefc 	bl	8000e24 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0b5      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203e:	4b3e      	ldr	r3, [pc, #248]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ee      	bne.n	8002028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	4a38      	ldr	r2, [pc, #224]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800205a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a1 	beq.w	80021a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b08      	cmp	r3, #8
 8002070:	d05c      	beq.n	800212c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d141      	bne.n	80020fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_RCC_OscConfig+0x478>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fed0 	bl	8000e24 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fecc 	bl	8000e24 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e087      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	019b      	lsls	r3, r3, #6
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	491b      	ldr	r1, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCC_OscConfig+0x478>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7fe fea5 	bl	8000e24 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7fe fea1 	bl	8000e24 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e05c      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x416>
 80020fc:	e054      	b.n	80021a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_RCC_OscConfig+0x478>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fe8e 	bl	8000e24 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe fe8a 	bl	8000e24 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e045      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <HAL_RCC_OscConfig+0x470>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x444>
 800212a:	e03d      	b.n	80021a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e038      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
 8002138:	40023800 	.word	0x40023800
 800213c:	40007000 	.word	0x40007000
 8002140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_RCC_OscConfig+0x4ec>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d028      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d121      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d11a      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800217a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800217c:	4293      	cmp	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cc      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b68      	ldr	r3, [pc, #416]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d90c      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b65      	ldr	r3, [pc, #404]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002216:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e067      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4934      	ldr	r1, [pc, #208]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7fe fdbc 	bl	8000e24 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7fe fdb8 	bl	8000e24 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20c      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f821 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	@ (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fd1c 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	080031f0 	.word	0x080031f0
 800237c:	2000001c 	.word	0x2000001c
 8002380:	20000020 	.word	0x20000020

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b094      	sub	sp, #80	@ 0x50
 800238a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239c:	4b79      	ldr	r3, [pc, #484]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x200>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d00d      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x40>
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	f200 80e1 	bhi.w	8002570 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x3a>
 80023b6:	e0db      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023bc:	e0db      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023be:	4b73      	ldr	r3, [pc, #460]	@ (800258c <HAL_RCC_GetSysClockFreq+0x208>)
 80023c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023c2:	e0d8      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d063      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023da:	4b6a      	ldr	r3, [pc, #424]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x200>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	099b      	lsrs	r3, r3, #6
 80023e0:	2200      	movs	r2, #0
 80023e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80023f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f6:	4622      	mov	r2, r4
 80023f8:	462b      	mov	r3, r5
 80023fa:	f04f 0000 	mov.w	r0, #0
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	0159      	lsls	r1, r3, #5
 8002404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002408:	0150      	lsls	r0, r2, #5
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4621      	mov	r1, r4
 8002410:	1a51      	subs	r1, r2, r1
 8002412:	6139      	str	r1, [r7, #16]
 8002414:	4629      	mov	r1, r5
 8002416:	eb63 0301 	sbc.w	r3, r3, r1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002428:	4659      	mov	r1, fp
 800242a:	018b      	lsls	r3, r1, #6
 800242c:	4651      	mov	r1, sl
 800242e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002432:	4651      	mov	r1, sl
 8002434:	018a      	lsls	r2, r1, #6
 8002436:	4651      	mov	r1, sl
 8002438:	ebb2 0801 	subs.w	r8, r2, r1
 800243c:	4659      	mov	r1, fp
 800243e:	eb63 0901 	sbc.w	r9, r3, r1
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4623      	mov	r3, r4
 800245c:	eb18 0303 	adds.w	r3, r8, r3
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	462b      	mov	r3, r5
 8002464:	eb49 0303 	adc.w	r3, r9, r3
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002476:	4629      	mov	r1, r5
 8002478:	024b      	lsls	r3, r1, #9
 800247a:	4621      	mov	r1, r4
 800247c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002480:	4621      	mov	r1, r4
 8002482:	024a      	lsls	r2, r1, #9
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800248a:	2200      	movs	r2, #0
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800248e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002494:	f7fd feaa 	bl	80001ec <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024a0:	e058      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b38      	ldr	r3, [pc, #224]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	2200      	movs	r2, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	4611      	mov	r1, r2
 80024ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024bc:	4642      	mov	r2, r8
 80024be:	464b      	mov	r3, r9
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	0159      	lsls	r1, r3, #5
 80024ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ce:	0150      	lsls	r0, r2, #5
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4641      	mov	r1, r8
 80024d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80024da:	4649      	mov	r1, r9
 80024dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f4:	ebb2 040a 	subs.w	r4, r2, sl
 80024f8:	eb63 050b 	sbc.w	r5, r3, fp
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	00eb      	lsls	r3, r5, #3
 8002506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800250a:	00e2      	lsls	r2, r4, #3
 800250c:	4614      	mov	r4, r2
 800250e:	461d      	mov	r5, r3
 8002510:	4643      	mov	r3, r8
 8002512:	18e3      	adds	r3, r4, r3
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	464b      	mov	r3, r9
 8002518:	eb45 0303 	adc.w	r3, r5, r3
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800252a:	4629      	mov	r1, r5
 800252c:	028b      	lsls	r3, r1, #10
 800252e:	4621      	mov	r1, r4
 8002530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002534:	4621      	mov	r1, r4
 8002536:	028a      	lsls	r2, r1, #10
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253e:	2200      	movs	r2, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	61fa      	str	r2, [r7, #28]
 8002544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002548:	f7fd fe50 	bl	80001ec <__aeabi_uldivmod>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4613      	mov	r3, r2
 8002552:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x200>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	3301      	adds	r3, #1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x204>)
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002578:	4618      	mov	r0, r3
 800257a:	3750      	adds	r7, #80	@ 0x50
 800257c:	46bd      	mov	sp, r7
 800257e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	00f42400 	.word	0x00f42400
 800258c:	007a1200 	.word	0x007a1200

08002590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002594:	4b03      	ldr	r3, [pc, #12]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	2000001c 	.word	0x2000001c

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025ac:	f7ff fff0 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0a9b      	lsrs	r3, r3, #10
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	@ (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08003200 	.word	0x08003200

080025d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d4:	f7ff ffdc 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0b5b      	lsrs	r3, r3, #13
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	@ (80025f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	08003200 	.word	0x08003200

080025f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e042      	b.n	8002690 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fa8c 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	@ 0x24
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800263a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f82b 	bl	8002698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b0c0      	sub	sp, #256	@ 0x100
 800269e:	af00      	add	r7, sp, #0
 80026a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b4:	68d9      	ldr	r1, [r3, #12]
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	ea40 0301 	orr.w	r3, r0, r1
 80026c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026f0:	f021 010c 	bic.w	r1, r1, #12
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026fe:	430b      	orrs	r3, r1
 8002700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002712:	6999      	ldr	r1, [r3, #24]
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	ea40 0301 	orr.w	r3, r0, r1
 800271e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b8f      	ldr	r3, [pc, #572]	@ (8002964 <UART_SetConfig+0x2cc>)
 8002728:	429a      	cmp	r2, r3
 800272a:	d005      	beq.n	8002738 <UART_SetConfig+0xa0>
 800272c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b8d      	ldr	r3, [pc, #564]	@ (8002968 <UART_SetConfig+0x2d0>)
 8002734:	429a      	cmp	r2, r3
 8002736:	d104      	bne.n	8002742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff ff4a 	bl	80025d0 <HAL_RCC_GetPCLK2Freq>
 800273c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002740:	e003      	b.n	800274a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002742:	f7ff ff31 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8002746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800274a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002754:	f040 810c 	bne.w	8002970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275c:	2200      	movs	r2, #0
 800275e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800276a:	4622      	mov	r2, r4
 800276c:	462b      	mov	r3, r5
 800276e:	1891      	adds	r1, r2, r2
 8002770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002772:	415b      	adcs	r3, r3
 8002774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800277a:	4621      	mov	r1, r4
 800277c:	eb12 0801 	adds.w	r8, r2, r1
 8002780:	4629      	mov	r1, r5
 8002782:	eb43 0901 	adc.w	r9, r3, r1
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	eb18 0303 	adds.w	r3, r8, r3
 80027a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027a8:	462b      	mov	r3, r5
 80027aa:	eb49 0303 	adc.w	r3, r9, r3
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027c6:	460b      	mov	r3, r1
 80027c8:	18db      	adds	r3, r3, r3
 80027ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80027cc:	4613      	mov	r3, r2
 80027ce:	eb42 0303 	adc.w	r3, r2, r3
 80027d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027dc:	f7fd fd06 	bl	80001ec <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4b61      	ldr	r3, [pc, #388]	@ (800296c <UART_SetConfig+0x2d4>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	011c      	lsls	r4, r3, #4
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002808:	415b      	adcs	r3, r3
 800280a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800280c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002810:	4641      	mov	r1, r8
 8002812:	eb12 0a01 	adds.w	sl, r2, r1
 8002816:	4649      	mov	r1, r9
 8002818:	eb43 0b01 	adc.w	fp, r3, r1
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800282c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002830:	4692      	mov	sl, r2
 8002832:	469b      	mov	fp, r3
 8002834:	4643      	mov	r3, r8
 8002836:	eb1a 0303 	adds.w	r3, sl, r3
 800283a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800283e:	464b      	mov	r3, r9
 8002840:	eb4b 0303 	adc.w	r3, fp, r3
 8002844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800285c:	460b      	mov	r3, r1
 800285e:	18db      	adds	r3, r3, r3
 8002860:	643b      	str	r3, [r7, #64]	@ 0x40
 8002862:	4613      	mov	r3, r2
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	647b      	str	r3, [r7, #68]	@ 0x44
 800286a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800286e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002872:	f7fd fcbb 	bl	80001ec <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4611      	mov	r1, r2
 800287c:	4b3b      	ldr	r3, [pc, #236]	@ (800296c <UART_SetConfig+0x2d4>)
 800287e:	fba3 2301 	umull	r2, r3, r3, r1
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2264      	movs	r2, #100	@ 0x64
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	1acb      	subs	r3, r1, r3
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002892:	4b36      	ldr	r3, [pc, #216]	@ (800296c <UART_SetConfig+0x2d4>)
 8002894:	fba3 2302 	umull	r2, r3, r3, r2
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028a0:	441c      	add	r4, r3
 80028a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028bc:	415b      	adcs	r3, r3
 80028be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028f8:	464b      	mov	r3, r9
 80028fa:	460a      	mov	r2, r1
 80028fc:	eb42 0303 	adc.w	r3, r2, r3
 8002900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002918:	460b      	mov	r3, r1
 800291a:	18db      	adds	r3, r3, r3
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800291e:	4613      	mov	r3, r2
 8002920:	eb42 0303 	adc.w	r3, r2, r3
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800292a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800292e:	f7fd fc5d 	bl	80001ec <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <UART_SetConfig+0x2d4>)
 8002938:	fba3 1302 	umull	r1, r3, r3, r2
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2164      	movs	r1, #100	@ 0x64
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	3332      	adds	r3, #50	@ 0x32
 800294a:	4a08      	ldr	r2, [pc, #32]	@ (800296c <UART_SetConfig+0x2d4>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	f003 0207 	and.w	r2, r3, #7
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4422      	add	r2, r4
 800295e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002960:	e106      	b.n	8002b70 <UART_SetConfig+0x4d8>
 8002962:	bf00      	nop
 8002964:	40011000 	.word	0x40011000
 8002968:	40011400 	.word	0x40011400
 800296c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002974:	2200      	movs	r2, #0
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800297a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800297e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002982:	4642      	mov	r2, r8
 8002984:	464b      	mov	r3, r9
 8002986:	1891      	adds	r1, r2, r2
 8002988:	6239      	str	r1, [r7, #32]
 800298a:	415b      	adcs	r3, r3
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
 800298e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002992:	4641      	mov	r1, r8
 8002994:	1854      	adds	r4, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb43 0501 	adc.w	r5, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	00eb      	lsls	r3, r5, #3
 80029a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029aa:	00e2      	lsls	r2, r4, #3
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	4643      	mov	r3, r8
 80029b2:	18e3      	adds	r3, r4, r3
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b8:	464b      	mov	r3, r9
 80029ba:	eb45 0303 	adc.w	r3, r5, r3
 80029be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029de:	4629      	mov	r1, r5
 80029e0:	008b      	lsls	r3, r1, #2
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e8:	4621      	mov	r1, r4
 80029ea:	008a      	lsls	r2, r1, #2
 80029ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029f0:	f7fd fbfc 	bl	80001ec <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4b60      	ldr	r3, [pc, #384]	@ (8002b7c <UART_SetConfig+0x4e4>)
 80029fa:	fba3 2302 	umull	r2, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	011c      	lsls	r4, r3, #4
 8002a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a14:	4642      	mov	r2, r8
 8002a16:	464b      	mov	r3, r9
 8002a18:	1891      	adds	r1, r2, r2
 8002a1a:	61b9      	str	r1, [r7, #24]
 8002a1c:	415b      	adcs	r3, r3
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a24:	4641      	mov	r1, r8
 8002a26:	1851      	adds	r1, r2, r1
 8002a28:	6139      	str	r1, [r7, #16]
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	414b      	adcs	r3, r1
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	00cb      	lsls	r3, r1, #3
 8002a40:	4651      	mov	r1, sl
 8002a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a46:	4651      	mov	r1, sl
 8002a48:	00ca      	lsls	r2, r1, #3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4642      	mov	r2, r8
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a58:	464b      	mov	r3, r9
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	eb42 0303 	adc.w	r3, r2, r3
 8002a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	008b      	lsls	r3, r1, #2
 8002a80:	4641      	mov	r1, r8
 8002a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a86:	4641      	mov	r1, r8
 8002a88:	008a      	lsls	r2, r1, #2
 8002a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a8e:	f7fd fbad 	bl	80001ec <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	4b38      	ldr	r3, [pc, #224]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2264      	movs	r2, #100	@ 0x64
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	1acb      	subs	r3, r1, r3
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	3332      	adds	r3, #50	@ 0x32
 8002aac:	4a33      	ldr	r2, [pc, #204]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab8:	441c      	add	r4, r3
 8002aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002abe:	2200      	movs	r2, #0
 8002ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ac8:	4642      	mov	r2, r8
 8002aca:	464b      	mov	r3, r9
 8002acc:	1891      	adds	r1, r2, r2
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	415b      	adcs	r3, r3
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad8:	4641      	mov	r1, r8
 8002ada:	1851      	adds	r1, r2, r1
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	4649      	mov	r1, r9
 8002ae0:	414b      	adcs	r3, r1
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002af0:	4659      	mov	r1, fp
 8002af2:	00cb      	lsls	r3, r1, #3
 8002af4:	4651      	mov	r1, sl
 8002af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002afa:	4651      	mov	r1, sl
 8002afc:	00ca      	lsls	r2, r1, #3
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	4642      	mov	r2, r8
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	eb42 0303 	adc.w	r3, r2, r3
 8002b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	008b      	lsls	r3, r1, #2
 8002b30:	4641      	mov	r1, r8
 8002b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b36:	4641      	mov	r1, r8
 8002b38:	008a      	lsls	r2, r1, #2
 8002b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b3e:	f7fd fb55 	bl	80001ec <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002b48:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	2164      	movs	r1, #100	@ 0x64
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	3332      	adds	r3, #50	@ 0x32
 8002b5a:	4a08      	ldr	r2, [pc, #32]	@ (8002b7c <UART_SetConfig+0x4e4>)
 8002b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	f003 020f 	and.w	r2, r3, #15
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4422      	add	r2, r4
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b76:	46bd      	mov	sp, r7
 8002b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7c:	51eb851f 	.word	0x51eb851f

08002b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b80:	b084      	sub	sp, #16
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	f107 001c 	add.w	r0, r7, #28
 8002b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d123      	bne.n	8002be2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 faa0 	bl	800311c <USB_CoreReset>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e01b      	b.n	8002c1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fa94 	bl	800311c <USB_CoreReset>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d106      	bne.n	8002c0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c0c:	e005      	b.n	8002c1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c1a:	7fbb      	ldrb	r3, [r7, #30]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10b      	bne.n	8002c38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f043 0206 	orr.w	r2, r3, #6
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c44:	b004      	add	sp, #16
 8002c46:	4770      	bx	lr

08002c48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 0201 	bic.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d115      	bne.n	8002cb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002c98:	200a      	movs	r0, #10
 8002c9a:	f7fe f8cf 	bl	8000e3c <HAL_Delay>
      ms += 10U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	330a      	adds	r3, #10
 8002ca2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa2b 	bl	8003100 <USB_GetMode>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d01e      	beq.n	8002cee <USB_SetCurrentMode+0x84>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cb4:	d9f0      	bls.n	8002c98 <USB_SetCurrentMode+0x2e>
 8002cb6:	e01a      	b.n	8002cee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d115      	bne.n	8002cea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002cca:	200a      	movs	r0, #10
 8002ccc:	f7fe f8b6 	bl	8000e3c <HAL_Delay>
      ms += 10U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	330a      	adds	r3, #10
 8002cd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa12 	bl	8003100 <USB_GetMode>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <USB_SetCurrentMode+0x84>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ce6:	d9f0      	bls.n	8002cca <USB_SetCurrentMode+0x60>
 8002ce8:	e001      	b.n	8002cee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e005      	b.n	8002cfa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2bc8      	cmp	r3, #200	@ 0xc8
 8002cf2:	d101      	bne.n	8002cf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d04:	b084      	sub	sp, #16
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e009      	b.n	8002d38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3340      	adds	r3, #64	@ 0x40
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3301      	adds	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b0e      	cmp	r3, #14
 8002d3c:	d9f2      	bls.n	8002d24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11c      	bne.n	8002d80 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d7e:	e00b      	b.n	8002d98 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002da4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10d      	bne.n	8002dc8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002db4:	2100      	movs	r1, #0
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f968 	bl	800308c <USB_SetDevSpeed>
 8002dbc:	e008      	b.n	8002dd0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f963 	bl	800308c <USB_SetDevSpeed>
 8002dc6:	e003      	b.n	8002dd0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dc8:	2103      	movs	r1, #3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f95e 	bl	800308c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8fa 	bl	8002fcc <USB_FlushTxFifo>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f924 	bl	8003030 <USB_FlushRxFifo>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e04:	461a      	mov	r2, r3
 8002e06:	2300      	movs	r3, #0
 8002e08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e10:	461a      	mov	r2, r3
 8002e12:	2300      	movs	r3, #0
 8002e14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e043      	b.n	8002ea4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e32:	d118      	bne.n	8002e66 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e46:	461a      	mov	r2, r3
 8002e48:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e013      	b.n	8002e78 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e62:	6013      	str	r3, [r2, #0]
 8002e64:	e008      	b.n	8002e78 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e72:	461a      	mov	r2, r3
 8002e74:	2300      	movs	r3, #0
 8002e76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e84:	461a      	mov	r2, r3
 8002e86:	2300      	movs	r3, #0
 8002e88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e96:	461a      	mov	r2, r3
 8002e98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d3b5      	bcc.n	8002e1c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e043      	b.n	8002f3e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ecc:	d118      	bne.n	8002f00 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e013      	b.n	8002f12 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e008      	b.n	8002f12 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2300      	movs	r3, #0
 8002f22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f42:	461a      	mov	r2, r3
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d3b5      	bcc.n	8002eb6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002f6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f043 0210 	orr.w	r2, r3, #16
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <USB_DevInit+0x2c4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f8c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f043 0208 	orr.w	r2, r3, #8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fa0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fc4:	b004      	add	sp, #16
 8002fc6:	4770      	bx	lr
 8002fc8:	803c3800 	.word	0x803c3800

08002fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002fe6:	d901      	bls.n	8002fec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e01b      	b.n	8003024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	daf2      	bge.n	8002fda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003010:	d901      	bls.n	8003016 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e006      	b.n	8003024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d0f0      	beq.n	8003004 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003048:	d901      	bls.n	800304e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e018      	b.n	8003080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	daf2      	bge.n	800303c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2210      	movs	r2, #16
 800305e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3301      	adds	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800306c:	d901      	bls.n	8003072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e006      	b.n	8003080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d0f0      	beq.n	8003060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80030d8:	f023 0303 	bic.w	r3, r3, #3
 80030dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0301 	and.w	r3, r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3301      	adds	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003134:	d901      	bls.n	800313a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e01b      	b.n	8003172 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	daf2      	bge.n	8003128 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800315e:	d901      	bls.n	8003164 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e006      	b.n	8003172 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d0f0      	beq.n	8003152 <USB_CoreReset+0x36>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <memset>:
 800317e:	4402      	add	r2, r0
 8003180:	4603      	mov	r3, r0
 8003182:	4293      	cmp	r3, r2
 8003184:	d100      	bne.n	8003188 <memset+0xa>
 8003186:	4770      	bx	lr
 8003188:	f803 1b01 	strb.w	r1, [r3], #1
 800318c:	e7f9      	b.n	8003182 <memset+0x4>
	...

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4d0d      	ldr	r5, [pc, #52]	@ (80031c8 <__libc_init_array+0x38>)
 8003194:	4c0d      	ldr	r4, [pc, #52]	@ (80031cc <__libc_init_array+0x3c>)
 8003196:	1b64      	subs	r4, r4, r5
 8003198:	10a4      	asrs	r4, r4, #2
 800319a:	2600      	movs	r6, #0
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	4d0b      	ldr	r5, [pc, #44]	@ (80031d0 <__libc_init_array+0x40>)
 80031a2:	4c0c      	ldr	r4, [pc, #48]	@ (80031d4 <__libc_init_array+0x44>)
 80031a4:	f000 f818 	bl	80031d8 <_init>
 80031a8:	1b64      	subs	r4, r4, r5
 80031aa:	10a4      	asrs	r4, r4, #2
 80031ac:	2600      	movs	r6, #0
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08003210 	.word	0x08003210
 80031cc:	08003210 	.word	0x08003210
 80031d0:	08003210 	.word	0x08003210
 80031d4:	08003214 	.word	0x08003214

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
